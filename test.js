/* File: K:\Synochro\DEV\Projets OC\P14\hrNet\src\Pages\Components\DateTimePicker\DateTimePicker.jsx */
import DatePicker from "react-datepicker"; import "react-datepicker/dist/react-datepicker.css"; import { useEffect, useState, forwardRef } from "react"; import { registerLocale } from "react-datepicker"; import en from "date-fns/locale/es"; import style from "./DateTimePicker.module.css"; import React from "react"; registerLocale("en", en); //register the locale for the datepicker  /**  * A component for selecting a date and time.  *  * @param {string} id - The ID of the DateTimePicker component.  * @param {function} setElement - The function to set the selected date and time.  * @param {Date} element - The selected date and time.  * @param {Date} minDate - The minimum selectable date.  * @param {Date} maxDate - The maximum selectable date.  * @returns {JSX.Element} The DateTimePicker component.  */ export default function DateTimePicker({   id,   setElement,   element,   minDate,   maxDate, }) {     // State to keep track of the selected date.     const [dateParams, setDateParams] = useState(element);     const clsName = id === "startDate" ? style.startDate : style.birthDate     // useEffect hook to update dateParams when the element prop changes.     useEffect(() => {       setDateParams(element);            }, [element,id]);          const CustomInput = forwardRef(({ value, id, onClick, onChange }, ref) => (       <input id={id} className={clsName} onClick={onClick} ref={ref} onChange={onChange} value={value} placeholder="MM/DD/YYYY">                     </input>          ));      return (       <DatePicker         id={id}         selected={dateParams}         minDate={minDate ? minDate : null}  // Conditional rendering of calculated minDate.         maxDate={maxDate ? maxDate : null}  // Conditional rendering of calculated maxDate.         showYearDropdown  // Enable dropdown for year selection.         scrollableYearDropdown  // Enable scrolling within the year dropdown.         onChange={(date) => setElement(new Date(date))}  // Handler for date changes.         showIcon         calendarIconClassname={style.CalendarIcon}         wrapperClassName={style.wrapper}         popperClassName={style.popper}         showPopperArrow={false} // Hide the arrow for the calendar popup.         dateFormat={"dd/MM/yyyy"} // Format for the date display.         customInput={<CustomInput />} // Custom input component for the datepicker.         />            );   }
/* File: K:\Synochro\DEV\Projets OC\P14\hrNet\src\Pages\Components\Form\Form.jsx */
/**  * This file contains a React component used for onboarding new employees.  * It demonstrates the use of React hooks, form handling, and Redux for state management.  * The component manages various form fields, handles state changes, and validates input data.  * It is structured to include several child components like CustomSelect and DateTimePicker for better user experience.  */  import style from "./Form.module.css"; import { useState, useEffect } from "react"; import { useDispatch } from "react-redux"; import { departments, states } from "../../../utils/utils.js"; import {   add_infos,   remove_infos, } from "../../../Redux/EmployeesSlices/InfosSlice.js"; import {   add_contact,   remove_contact, } from "../../../Redux/EmployeesSlices/contactSlice.js"; import {   add_onboarding,   remove_onboarding, } from "../../../Redux/EmployeesSlices/onBoardingSlice.js"; import { add_employee } from "../../../Redux/databaseSlice/dataBaseSlice.js"; import CustomSelect from "../Select/CustomSelect.jsx"; import DateTimePicker from "../DateTimePicker/DateTimePicker.jsx"; import store from "../../../Redux/store.js";  /**  * Represents the main onboarding form component in the application.  * This component is responsible for gathering and validating the new employee's data.  *  * @component  * @param {boolean} props.isModaleActive - Indicates if the modal is active.  * @param {function} props.setValidateForm - Callback function to set the form validation status.  * @param {function} props.setNeedClose - Function to handle the state of modal closure.  * @param {boolean} props.needClose - State to indicate if the modal needs to be closed.  * @returns {JSX.Element} - The rendered form component.  */ export default function Form({   isModaleActive,   setValidateForm,   setNeedClose,   needClose, }) {   // Constants for setting age limits   const maxAge = 70;   const minAge = 18;    // State hooks for handling form inputs   const [firstName, setFirstName] = useState("");   const [lastName, setLastName] = useState("");   const [startDate, setStartDate] = useState(new Date());   const [birthDate, setBirthDate] = useState(     new Date(new Date().setFullYear(startDate.getFullYear() - 18))   );   const [street, setStreet] = useState("");   const [city, setCity] = useState("");   const [zip, setZip] = useState("");    // Calculating maximum and minimum permissible dates   let date = new Date(startDate);    let minBirthDate = new Date(startDate);   minBirthDate.setFullYear(startDate.getFullYear() - maxAge);    let maxBirthDate = new Date(startDate);   maxBirthDate.setFullYear(date.getFullYear() - minAge);    let minStartDate = new Date(startDate);   minStartDate.setFullYear(date.getFullYear() - 1);    let maxStartDate = new Date(startDate);   maxStartDate.setFullYear(date.getFullYear() + 1);    // State hooks for managing different sections of the form   const [contact, setContact] = useState({     street: "",     city: "",     zip: "",     state: "",   });   const [infos, setInfos] = useState({     firstName: "",     lastName: "",     birthDate: "",   });   const [onBoarding, setOnboarding] = useState({     startDate: "",     department: "",   });    // State hooks for managing selections in CustomSelect components   const [selectedStateLocation, setSelectedStateLocation] = useState(states[0]);   const [selectedDepartment, setSelectedDepartment] = useState(departments[0]);    // State hooks for internal management of form state   const [stateLocation, setStateLocation] = useState(     selectedStateLocation.value   );   const [department, setDepartment] = useState(selectedDepartment.value);    // State hooks for managing error message visibility   const [FirstNameErrorCls, setFirstNameErrorCls] = useState(style.hidden);   const [LastNameErrorCls, setLastNameErrorCls] = useState(style.hidden);   const [BirthdateErrorCls, setBirthdateErrorCls] = useState(style.hidden);   const [StreetErrorCls, setStreetErrorCls] = useState(style.hidden);   const [CityErrorCls, setCityErrorCls] = useState(style.hidden);   const [ZipCodeErrorCls, setZipCodeErrorCls] = useState(style.hidden);   const [StartDateErrorCls, setStartDateErrorCls] = useState(style.hidden);    // State hook for form validation   const [validated, setValidated] = useState(false);    // Redux dispatch hook for state management   const dispatch = useDispatch();    // Effect hook for handling updates to form state   useEffect(() => {     setInfos({       firstName: firstName,       lastName: lastName,       birthDate: ConvertDate(birthDate),     });      setContact({       street: street,       city: city,       state: stateLocation,       zip: zip,     });      setOnboarding({       startDate: ConvertDate(startDate),       department: department,     });      if (needClose) {       // Reset form state when modal is closed       resetForm();       setValidateForm(!needClose);       setNeedClose(!needClose);     }   }, [     isModaleActive,     firstName,     lastName,     birthDate,     street,     city,     zip,     startDate,     selectedStateLocation,     selectedDepartment,     stateLocation,     department,     validated,     needClose,   ]);    function ConvertDate(date) {     // Function for formatting date     return new Date(date).toLocaleDateString();   }    // Function for validating age   function CalculatedBirthdate(birthDate, startDate) {     // Function for validating age      // Get day, month, and year from date objects     const onBoardingDay = Number(new Date(startDate).getDay());     const onBoardingMonth = Number(new Date(startDate).getMonth());     const onBoardingYear = Number(new Date(startDate).getFullYear());      const birthday = Number(new Date(birthDate).getDay());     const birthmonth = Number(new Date(birthDate).getMonth());     const birthyear = Number(new Date(birthDate).getFullYear());      // Check if age is within limits     const notYearAged =       onBoardingYear - birthyear < 18 || onBoardingYear - birthyear > 100;     const notMonthAged =       onBoardingMonth - birthmonth < 0 || onBoardingMonth - birthmonth > 12;     const notDayAged =       onBoardingDay - birthday < -31 || onBoardingDay - birthday > 0;      if (notYearAged || (!notYearAged && notMonthAged && notDayAged)) {       return false; // Return false if age is not within limits     }      return true; // Return true if age is within limits   }    function checkFields() {     // Function for validating form fields      // Regular expressions for validating input     const streetRegex = /^[a-zA-Z0-9\s,'-]*$/;     const textRegEx = /^[a-zA-Z'-]+$/;     const zipRegEx = /^[0-9]{5}(?:-[0-9]{4})?$/;     const dateRegEx = /^\d{2}\/\d{2}\/\d{4}$/;      let validate = true;     const errorClass = style.error_Message; // CSS class for displaying error messages     const validClass = style.hidden; // CSS class for hiding error messages      const elements = [       // Array of form elements to validate       {         type: "firstname", // Type of element         element: firstName, // Element to validate         tests: textRegEx.test(firstName) && firstName.trim().length > 2, // Test for valid input         act: setFirstNameErrorCls, // Function to set error message visibility       },       {         type: "lastname",         element: lastName,         tests: textRegEx.test(lastName) && lastName.trim().length > 2,         act: setLastNameErrorCls,       },       {         type: "birthdate",         element: birthDate,         tests:           dateRegEx.test(birthDate.toLocaleDateString()) &&           CalculatedBirthdate(birthDate, startDate),         act: setBirthdateErrorCls,       },       {         type: "street",         element: street,         tests: streetRegex.test(street) && street.trim().length > 2,         act: setStreetErrorCls,       },       {         type: "city",         element: city,         tests: textRegEx.test(city) && city.trim().length > 2,         act: setCityErrorCls,       },       {         type: "zip",         element: zip,         tests: zipRegEx.test(zip) && zip.trim().length > 2,         act: setZipCodeErrorCls,       },       {         type: "startDate",         element: startDate,         tests: dateRegEx.test(startDate.toLocaleDateString()),         act: setStartDateErrorCls,       },     ];      elements.map((el) => {       // Iterate through elements to validate       if (!el.tests && el.element.length < 2) {         el.act(errorClass);         validate = false;       } else {         el.act(validClass);       }       return null;     });     return validate; // Return validation status   }    function checkForm() {     // Function for validating form     if (checkFields()) {       // Check if form fields are valid       setInfos({         firstName: firstName,         lastName: lastName,         birthDate: birthDate,       });        setContact({         street: street,         city: city,         state: stateLocation,         zip: zip,       });        setOnboarding({         startDate: startDate,         department: department,       });        return true; // Return true if form is valid     }      return false; // Return false if form is invalid   }    function resetState() {     // Function for resetting form state     setFirstName("");     setLastName("");     setStreet("");     setCity("");     setZip("");     setStartDate(new Date());     setBirthDate(       new Date(new Date().setFullYear(startDate.getFullYear() - 18)) // Set default birthdate to 18 years ago     );      setContact({ street: "", city: "", zip: "", state: "" });     setInfos({ firstName: "", lastName: "", birthDate: "" });     setOnboarding({ startDate: "", department: "" });     setSelectedStateLocation(states[0]);     setSelectedDepartment(departments[0]);     setStateLocation(selectedStateLocation.value);     setDepartment(selectedDepartment.value);     setFirstNameErrorCls(style.hidden);     setLastNameErrorCls(style.hidden);     setBirthdateErrorCls(style.hidden);     setStreetErrorCls(style.hidden);     setCityErrorCls(style.hidden);     setZipCodeErrorCls(style.hidden);     setStartDateErrorCls(style.hidden);     setValidated(false);     setValidateForm(false);     dispatch(remove_infos()); // Dispatch action to remove infos from Redux state     dispatch(remove_contact()); // Dispatch action to remove contact from Redux state     dispatch(remove_onboarding()); // Dispatch action to remove onboarding from Redux state   }    function resetForm() {     // Function for resetting form     const inputs = Array.from(document.querySelectorAll("input"));     inputs.map((input) => (input.value = "")); // Clear input fields      resetState(); // Reset form state   }    function migrateToState() {     // Function for migrating form data to Redux state if valid     dispatch(       add_infos({ // Dispatch action to add infos to Redux state         firstName: infos.firstName,         lastName: infos.lastName,         birthDate: infos.birthDate,       })     );     dispatch(       add_contact({ // Dispatch action to add contact to Redux state         street: contact.street,         city: contact.city,         state: contact.state,         zip: contact.zip,       })     );     dispatch(        add_onboarding({ // Dispatch action to add onboarding to Redux state         startDate: onBoarding.startDate,         department: onBoarding.department,       })     );      // Get employee data from Redux state     const employee = store.getState().employee;     const infosSelector = employee.infos;     const contactSelector = employee.contact;     const onboardingSelector = employee.onboarding;      dispatch(       add_employee({ // Dispatch action to add employee to Redux state         infos: { ...infosSelector },         contact: { ...contactSelector },         onBoarding: { ...onboardingSelector },       })     );   }    function Handle_Submit(e) {     // Function for handling form submission     e.preventDefault();      if (checkForm()) {       // Check if form is valid       migrateToState(); // Migrate form data to Redux state       setValidateForm(true); // Set form validation status     }   }    return (     <form onSubmit={Handle_Submit} className={style.form}>   {/* Onboarding section of the form */}   <div className={style.container_corps_infos}>     <h2>Onboarding</h2>     {/* Group of inputs related to onboarding */}     <div className={style.onboarding_Group}>       {/* Form group for start date selection */}       <div className={style.form_group}>         <label htmlFor="startDate">Start Date</label>         {/* Custom date picker component for selecting start date */}         <DateTimePicker           id="startDate"           element={startDate}           setElement={setStartDate}           minDate={minStartDate}           maxDate={maxStartDate}           fixedHeight={true}         />         {/* Error message for start date */}         <p id="StartDateError" className={StartDateErrorCls}>           Start Date required!         </p>       </div>        {/* Form group for department selection */}       <div className={style.form_group}>         <label htmlFor="department">Department</label>         {/* Custom select component for choosing department */}         <CustomSelect           id="department"           element={selectedDepartment}           setElement={setSelectedDepartment}           options={departments}         />       </div>     </div>   </div>    {/* Employee section of the form */}   <div className={style.container_infos}>     <div className={style.container_employee_infos}>       <h2>Employee</h2>       {/* Group of inputs related to employee information */}       <div className={style.employee_Group}>         {/* Form group for first name input */}         <div className={style.form_group}>           <label htmlFor="firstName">First Name</label>           {/* Input for first name */}           <input             onChange={(e) => setFirstName(e.target.value)}             type="text"             id="firstName"             name="firstName"           />           {/* Error message for first name */}           <p id="firstNameError" className={FirstNameErrorCls}>             FirstName required!           </p>         </div>          {/* Form group for last name input */}         <div className={style.form_group}>           <label htmlFor="lastName">Last Name</label>           {/* Input for last name */}           <input             onChange={(e) => setLastName(e.target.value)}             type="text"             id="lastName"             name="lastName"           />           {/* Error message for last name */}           <p id="lastNameError" className={LastNameErrorCls}>             LastName required!           </p>         </div>          {/* Form group for birth date selection */}         <div className={style.form_group}>           <label htmlFor="birthDate">Date of birth</label>           {/* Custom date picker component for selecting birth date */}           <DateTimePicker             id="birthDate"             fixedHeight={true}             element={birthDate}             setElement={setBirthDate}             minDate={minBirthDate}             maxDate={maxBirthDate}           />           {/* Error message for birth date */}           <p id="birthdateError" className={BirthdateErrorCls}>             BirthDate required!           </p>         </div>       </div>     </div>      {/* Contact section of the form */}     <div className={style.container_contact_infos}>       <h2>Contact</h2>       {/* Group of inputs related to contact information */}       <div className={style.contact_Group}>         {/* Form group for street input */}         <div className={style.form_group}>           <label htmlFor="Street">Street</label>           {/* Input for street */}           <input             onChange={(e) => setStreet(e.target.value)}             type="text"             id="Street"             name="Street"           />           {/* Error message for street */}           <p id="streetError" className={StreetErrorCls}>             Street required!           </p>         </div>          {/* Form group for city input */}         <div className={style.form_group}>           <label htmlFor="City">City</label>           {/* Input for city */}           <input             onChange={(e) => setCity(e.target.value)}             type="text"             id="City"             name="City"           />           {/* Error message for city */}           <p id="CityError" className={CityErrorCls}>             City required!           </p>         </div>          {/* Form group for state selection */}         <div className={style.form_group}>           <label htmlFor="selectStates">State</label>           {/* Custom select component for choosing state */}           <CustomSelect             id="selectStates"             element={selectedStateLocation}             setElement={setSelectedStateLocation}             options={states}           />         </div>          {/* Form group for zip code input */}         <div className={style.form_group}>           <label htmlFor="Zip">Zip Code</label>           {/* Input for zip code */}           <input             onChange={(e) => setZip(e.target.value)}             type="text"             id="Zip"             name="Zip"           />           {/* Error message for zip code */}           <p id="ZipCodeError" className={ZipCodeErrorCls}>             ZipCode required!           </p>         </div>       </div>     </div>   </div>    {/* Submit button for the form */}   <div className={style.container_button}>     <button className={style.submit_button} type="submit">       Save     </button>   </div> </form>    ); }
/* File: K:\Synochro\DEV\Projets OC\P14\hrNet\src\Pages\Components\Header\NavBar\Navbar.jsx */
/* Navbar.jsx  * Navbar component for the header of the app.  *  */  import React from "react"; import style from "./NavBar.module.css"; import { NavLink } from "react-router-dom"; import { useLocation } from "react-router-dom";  export default function Navbar() {   // Hook to get the current location (path) in the app   const location = useLocation();    // Navigation buttons for valid routes   const validRouteButtons = (     <>       {/* NavLink for creating a new employee */}       <NavLink         id="createLink"         className={({ isActive }) =>           isActive             ? `${style.createLink}  ${style.active}`             : `${style.createLink}`         }         to="/"       >         Create new Employee       </NavLink>        {/* NavLink for viewing current employees */}       <NavLink         id="showLink"         className={({ isActive }) =>           isActive ? `${style.showLink}  ${style.active}` : `${style.showLink}`         }         to="/showEmployees"       >         View current Employees       </NavLink>     </>   );    // Navigation button for error route   const errorRouteButtons = (     <>       {/* NavLink to return to the home page from an error page */}       <NavLink         id="errorLink"         className={({ isActive }) =>           isActive             ? `${style.errorLink}  ${style.active}`             : `${style.errorLink}`         }         to="/"       >         Return to Home       </NavLink>     </>   );    return (     // Render the navigation bar with appropriate links based on the current path     <nav id="nav" className={style.nav}>       {location.pathname !== "/error" ? validRouteButtons : errorRouteButtons}     </nav>   ); }
/* File: K:\Synochro\DEV\Projets OC\P14\hrNet\src\Pages\Components\Header\Header.jsx */
import React from 'react' import style from './Header.module.css' import logo from '../../../assets/hr_logo.png' import Navbar from './NavBar/Navbar.jsx';  export default function Header() {   // The Header function component renders the header section of the web application.    return (     // JSX structure for the header     <header className={style.header}>       {/* Container for the application logo and title */}       <div className={style.hrnet}>         {/* Image tag for displaying the logo */}         <img src={logo} className={style.logo} alt="Logo" />         {/* Heading for the application title */}         <h1 className={style.application_Title}>HRnet</h1>       </div>       {/* Embedding the Navbar component */}       <Navbar/>     </header>   ) }
/* File: K:\Synochro\DEV\Projets OC\P14\hrNet\src\Pages\Components\Select\CustomSelect.jsx */
import Select from "react-select"; import { useEffect, useState } from "react";  /**  * CustomSelect - A React component for a customizable select input.  *  * @param {Object} props - The component props.  * @param {string} props.id - The ID of the select input, used for conditional styling.  * @param {Array} props.options - Array of options for the select input.  * @param {Object} props.element - The current selected value.  * @param {Function} props.setElement - Function to update the selected value.  * @returns {JSX.Element} - The rendered Select component.  */ export default function CustomSelect({ id, options, element, setElement }) {   // State to track the currently selected option.   const [selected, setSelected] = useState(element);    // Effect hook to synchronize state with prop changes.   useEffect(() => {     setSelected(element);   }, [element]);    // Custom style settings based on the component's ID.   const customWidth = id === "selectState" ? "200px" : "100%";    // Return statement for the Select component with customized styles.   return (     <Select       menuPlacement="auto"       styles={{         // Custom styles for the container.         container: (provided) => ({           ...provided,           border: "none",           outline: "none",           color: "#000",           display: "flex",           alignItems: "center",           justifyContent: "space-between",           backgroundColor: "#fff",           borderRadius: "5px",           fontSize: "1vw",           padding: "0 5px",           width: customWidth,           height: "2vw",           marginTop: "0.2vw",           "&:focus": { outline: "none" },         }),         control: (provided) => ({           // Custom styles the container for the selected value.           ...provided,           border: "none",           display: "flex",           alignContent: "center",           justifyContent: "center",           outline: "none",           boxShadow: "none",           borderRadius: "5px",           overflow: "hidden",           fontWeight: "500",           fontSize: "1vw",           minHeight: "2vw",           position: "absolute",           height: "2vw",           width: "100%",           top: "0",           margin:0,           "&:hover": { border: "none" },         }),                  indicatorsContainer: (provided) => ({           // Custom styles for the container of the dropdown indicator.           ...provided,           color: "#000",           padding: "0",           border: "none",         }),         indicatorSeparator: (provided) => ({           // Custom styles for the separator between the dropdown indicator and the selected value.           ...provided,           display: "none",         }),         dropdownIndicator: (provided) => ({           // Custom styles for the dropdown indicator.           ...provided,           color: "#fff",           padding: "0",           display: "flex",           justifyContent: "center",           alignItems: "center",           border: "none",           width: "2vw",           height: "100%",           backgroundSize: "cover",           backgroundPosition: "end",           backgroundRepeat: "no-repeat",           svg: {             width: "100%",             height: "100%",             fill: "#fff",             strokeWidth: "1px",             borderColor: "#001c30",             stroke: "#001c30",           },         }),         valueContainer: (provided) => ({           // Custom styles for the container of the selected value.           ...provided,           padding: " 0",           fontSize: "1vw",           justifyItems: "space-around",           alignContent: "center",           alignItems: "center",         }),         singleValue: (provided) => ({           // Custom styles for the selected value.           ...provided,         }),         input: (provided) => ({           // Custom styles for the input.           ...provided,           height: "100%",           margin: "0",           verticalAlign: "middle",         }),         inputContainer: (provided) => ({           // Custom styles for the container of the input.           ...provided,           margin: "0",         }),         menu: (provided) => ({           // Custom styles for the dropdown menu.           ...provided,           position: "absolute",           left: "0",           top: "0",           borderRadius: "5px",           marginTop: "0",           fontSize: "1vw",           zIndex: 100,         }),       }}       type="text"       value={selected}       onChange={setElement} // Update the selected value.       placeholder={options[0].value} // Set the placeholder to the first option.       name={id}       inputId={id} // Set the ID of the input.       options={options} // Set the options for the list     />   ); }
/* File: K:\Synochro\DEV\Projets OC\P14\hrNet\src\Pages\Components\Table\Table.jsx */
import React, { useMemo } from "react"; import {   MaterialReactTable,   useMaterialReactTable, } from "material-react-table"; import style from "./Table.module.css"; import { createTheme, ThemeProvider } from "@mui/material/styles";   /**  * Theme configuration for the table component.  */ const theme = createTheme({   components: {     MuiPaper: {      // Paper component for the table container.        styleOverrides: {         root: {          // Overrides the default styles for the root element.            display: "flex",           flexDirection: "column",           margin: "2vw 5%",           borderRadius: "20px",           height: "fit-content",           width: "95%",           maxHeight: "90%",           backgroundColor: "#001C30 !important",           "& > .MuiBox-root": { // Overrides the default styles for the box element.             height: "5%",             width: "100%",             borderRadius: 0,             backgroundColor: "#001C30",             "& > .MuiBox-root": { // Overrides the default styles for the children box element.               backgroundColor: "#001C30",               height: "100%",               "& > .MuiBox-root": { // Overrides the default styles for the children box element.                 width: "100%",                 "& > .MuiTablePagination-root": { // Overrides the default styles for the pagination component.                   width: "100%",                 },               },             },           },         },       },     },     MuiTableContainer: {      // Table container component.        styleOverrides: {         root: {           flexGrow: 1,           flexShrink: 1,           maxWidth: "100%",         },       },     },     MuiTable: {      // Table component.        styleOverrides: {         root: {           display: "flex",           flexDirection: "column",           width: "100%",           maxWidth: "100%",           height: "100%",         },       },     },     MuiTableHead: {      // Table head component.        styleOverrides: {         root: {           position: "sticky",           display: "flex",           width: "100%",           maxWidth: "100%",           height: "5%",           backgroundColor: "#001C30",         },       },     },     MuiTableFooter: {      // Table footer component.        styleOverrides: {         root: {           display: "none",         },       },     },     MuiTableBody: {     // Table body component.       styleOverrides: {         root: {         // Overrides the default styles for the root element.           height: "95%",           display: "flex",           flexDirection: "column",           justifyContent: "center",           '&> tr > td > p'  : { // Overrides the default styles for the paragraph element.             color: 'white',             fontSize: '0.8vw',             fontWeight: 'normal',           }         },       },     },     MuiSelect: {     // Select component.       styleOverrides: {         select: {    // Overrides the default styles for the select element.           color: "white",           fontSize: "0.8vw",           fontWeight: "normal",           "&:focus": { // Overrides the default styles for the focus state.             backgroundColor: "transparent",           },         },         icon: {   // Overrides the default styles for the icon element.           color: "white",         },       },     },     MuiFormLabel: {    // Form label component.       styleOverrides: {          root: {   // Overrides the default styles for the root element.           color: "white",           fontSize: "0.8vw",           fontWeight: "normal",           "&.Mui-focused": {             color: "white",           },         },       },     },     MuiTableRow: {   // Table row component.       styleOverrides: {         root: {  // Overrides the default styles for the root element.           display: "flex",           width: "100%",         },         head: { // Overrides the default styles for the head element.           backgroundColor: "#001C30",         },       },     },     MuiOutlinedInput: {  // Outlined input component.       styleOverrides: {         root: { // Overrides the default styles for the root element.           color: "white",           fontSize: "0.8vw",           fontWeight: "normal",           "& .MuiOutlinedInput-notchedOutline": { // Overrides the default styles for the notched search outline element.             borderColor: "white",           },           "&:hover .MuiOutlinedInput-notchedOutline": { // Overrides the default styles for the notched outline element on hover.             borderColor: "white",           },           "&.Mui-focused .MuiOutlinedInput-notchedOutline": { // Overrides the default styles for the notched outline element on focus.              borderColor: "white",            }         }       }     },      MuiInputAdornment: { // Input adornment component.       styleOverrides: {         root: {           svg: { // Overrides the default styles for the svg element.             color: "white",           },       },     },   },      MuiTableCell: { // Table cell component.       styleOverrides: {         root: { // Overrides the default styles for the root element.           fontSize: "0.6vw",           flexShrink: 1,           flexGrow: 1,           textAlign: "center",           alignItems: "center",           padding: "5px",         },         head: { // Overrides the default cells for the head element.           color: "#fff",           backgroundColor: "#001c30 !important",           justifyContent: "space-around",           fontSize: "0.7vw",           padding: "5px 2px !important",           "& .Mui-TableHeadCell-Content": { // Overrides the default styles for the table head cell content element.             justifyContent: "space-between",             textAlign: "center",             fontWeight: "bold",              "&-Labels": { // Overrides the default styles for the table head cell content labels element.               position: "relative",               left: "1vw",               alignItems: "center",             },             "&-Actions": { // Overrides the default styles for the table head cell content Svg element.               position: "relative",               fill: "white",               right: 0,               "& .MuiIconButton-root": { // Overrides the default styles for the icon button element.                 color: "white",               },             },           },         },       },     },     MuiTableSortLabel: { // Table sort label component.       styleOverrides: {         root: {           "& .MuiTableSortLabel-icon": { // Overrides the default styles for the table sort label icon element.             fill: "white",           },         },       },     },     MuiMenu: { // Menu component.       styleOverrides: {         paper: { // Overrides the default styles for the paper element.           backgroundColor: "#001C30",            color: "white",           margin: 0,           width: "fit-content",           height: "fit-content",           position: "absolute",           borderRadius: "0",         },         list: { // Overrides the default styles for the list element.           padding: "0",           margin: "0",           justifyContent: "center",           alignItems: "center",           textAlign: "center",         },       },     },     MuiMenuItem: { // Menu item component.       styleOverrides: {         gutters: { // Overrides the default styles for the li element.           color: "white",           justifyContent: "center",           textAlign: "center",           "&:hover": {             backgroundColor: "#001C30",           },         },       },     },     MuiListItemIcon: { // List item icon component.       styleOverrides: {         root: {           color: "white",         },       },     },     MuiBox: { // Box component.       styleOverrides: {         root: { // Overrides the default styles for the root element.           backgroundColor: "#001C30",         },       },     },     MuiButtonBase: { // Button base component.       styleOverrides: {         root: {           "&.MuiIconButton-root": { // Overrides the default styles for the icon button element.             color: "white",           },         },       },     },     MuiTablePagination: { // Table pagination block.       styleOverrides: {         root: { // Overrides the default styles for the root element.           width: "100%",           justifyContent: "space-between",         },       },     },     MuiTypography: { // Typography component.       styleOverrides: {         body2: {           color: "white",           position:'absolute',           left:'50%',           translate:'-50%',          },       },     },   }, });    /**  * Main functional component to render an employee data table.  * Utilizes 'MaterialReactTable' for a rich UI experience with custom theming.  *  * @param {Array} props.datas - Collection of employee data to be displayed.  * @returns {React.ReactElement} - The fully configured and styled data table.  */ export default function EmployeesTable({ datas }) {    /**  * Functional component to render individual cell content in bold.  *  * @param {string} props.renderedCellValue - The text content for the cell.  * @returns {React.ReactElement} - A strong element wrapping the cell value.  */ const RenderedCell = ({ renderedCellValue }) => (   <strong>{renderedCellValue}</strong> );     // Defines the column configuration for the table, utilizing useMemo for performance.   const columns = useMemo(     () => [       // Each object within this array configures a column of the table.        {         accessorKey: "firstName", // Identifies the data field for this column.         header: "First Name", // Sets the display name for the header.         Cell: RenderedCell, // Custom render function for cell content.       },       { accessorKey: "lastName", header: "Last Name", Cell: RenderedCell },       {         accessorKey: "startDate",         header: "Start Date",         Cell: RenderedCell,          // Custom sorting function to handle dates in DD/MM/YYYY format.         sortingFn: (rowA, rowB) => {           const splittedDateA = rowA.original.startDate.split("/");           const splittedDateB = rowB.original.startDate.split("/");            const dateA = splittedDateA[2] + splittedDateA[0] + splittedDateA[1];           const dateB = splittedDateB[2] + splittedDateB[0] + splittedDateB[1];            console.log(dateA, "dateA");           console.log(dateB, "dateB");           return dateA - dateB;         },       },       { accessorKey: "department", header: "Department", Cell: RenderedCell },       {         accessorKey: "birthDate",         header: "Date of Birth",         Cell: RenderedCell,         // Custom sorting function to handle dates in DD/MM/YYYY format.         sortingFn: (rowA, rowB) => {           console.log(rowA, "rowA");            const splittedDateA = rowA.original.birthDate.split("/");           const splittedDateB = rowB.original.birthDate.split("/");            const dateA = splittedDateA[2] + splittedDateA[0] + splittedDateA[1];           const dateB = splittedDateB[2] + splittedDateB[0] + splittedDateB[1];            console.log(dateA, "dateA");           console.log(dateB, "dateB");           return dateA - dateB;         },       },       { accessorKey: "street", header: "Street", Cell: RenderedCell },       { accessorKey: "city", header: "City", Cell: RenderedCell },       { accessorKey: "abbreviation", header: "State", Cell: RenderedCell },       { accessorKey: "zip", header: "Zip Code", Cell: RenderedCell },     ],     []   );    const table = useMaterialReactTable({ // Creates the table instance.     columns,     data: datas,     enableStickyHeader: true,     enableStickyFooter: true,     enableHiding: false,     enableColumnFiltersModes: true,     enableDensityToggle: false,     enablePagination: true,     enableToolbar: false,     enableFullScreenToggle: true,     manualPagination: false,     paginationDisplayMode: "default",     muiPaginationProps: {       color: "#001c30",       variant: "outlined",        shape: "rounded",       rowsPerPageOptions: [10, 25, 50, 100], // Sets the available rows per page options.     },     manualSortBy: false,     enableColumnFilters: false,     defaultColumn: { // Sets the default column configuration.       size: 50,       maxSize: 300,       minSize: 40,     },   });    // Renders the table within a theme provider to apply custom styles.   return (     <ThemeProvider theme={theme}>       <MaterialReactTable className={style.tableContainer} table={table} />     </ThemeProvider>   ); }
/* File: K:\Synochro\DEV\Projets OC\P14\hrNet\src\Pages\Components\Layout.jsx */
import React from 'react' import Header from './Header/Header.jsx' import { Outlet } from 'react-router-dom'  export default function Layout() {   // Layout is a functional component that serves as the layout structure for the application.    return (     // JSX structure for the Layout component     <>       {/* Including the Header component at the top of the layout */}       <Header/>        {/* Outlet component from React Router */}       {/* This acts as a placeholder for the routed content which will be rendered here */}       <Outlet/>     </>   ) }
/* File: K:\Synochro\DEV\Projets OC\P14\hrNet\src\Pages\CreateUserPage\CreateUserPage.jsx */
import { useEffect, useState } from "react"; import style from "./CreateUserPage.module.css"; import Form from "../Components/Form/Form.jsx"; import TinyModale from "tinymodalebyrchon";  export default function CreateUserPage() {   // State for tracking form validation status   const [validateForm, setValidateForm] = useState(false);    // State to control the visibility of the modal   const [activeModale, setActiveModale] = useState(false);    // State to track the need for closing the modal   const [needClose, setNeedClose] = useState("");    // Effect hook that activates the modal when the form is validated   useEffect(() => {     if (validateForm) {       setActiveModale(true);     }   }, [validateForm]);    return (     // JSX structure for the CreateUserPage component     <>       <main className={style.main}>         {/* Page title */}         <h1 className={style.page_Title}>Create Employees</h1>          {/* Form component for creating new employees */}         <Form           isModaleActive={activeModale}           setValidateForm={setValidateForm}           setNeedClose={setNeedClose}           needClose={needClose}         />       </main>        {/* TinyModale component for displaying modal popups */}       <TinyModale         onClose={setNeedClose}         isValidateForm={validateForm}         setActiveModale={setActiveModale}         modaleboxcolor="green"         radius="20px"         buttonMargin="25px"         btnOnClick={setActiveModale}         showButton={true}         buttonTextContent="yeeeahhh"         buttonRadius="50px"         bgAnimation="fade"       />     </>   ); }
/* File: K:\Synochro\DEV\Projets OC\P14\hrNet\src\Pages\ErrorPage\ErrorPage.jsx */
import style from './ErrorPage.module.css'  export default function ErrorPage() {   return (     <main>       <h1 className={style.page_Title}>ErrorPage</h1>       <div className={style.content}>         <h2 className={style.errorCode}>404</h2>         <p>Something gets wrong</p>       </div>            </main>   ) }
/* File: K:\Synochro\DEV\Projets OC\P14\hrNet\src\Pages\ShowUsersPage\ShowUsersPage.jsx */
import style from './ShowUsersPage.module.css' import EmployeesTable from '../Components/Table/Table.jsx' // import { useSelector } from 'react-redux' // comment this line to use data from MokeDatas.json import JSONDatas from '../../utils/mockDatas.json' // uncomment this line to use data from MokeDatas.json  export default function ShowUserPage() {   // comment below to use data from MokeDatas.json   // const JSONDatas = useSelector((state) => state.database);    // Flattening and restructuring the JSON data for the table   const flated = JSONDatas.flatMap((item) => {     const { infos, contact, onboarding } = item;     const { firstName, lastName, birthDate } = infos;     const { street, city, state, zip } = contact;     const { abbreviation } = state;     const { startDate, department } = onboarding;      // Returning a flat structure of the data for each row in the table     return {       firstName,       lastName,       birthDate,       department,       street,       city,       abbreviation,       zip,       startDate     };   });        return (     // JSX structure for the ShowUserPage component     <main className={style.main}>       {/* Page title */}       <h1 className={style.page_Title}>Database</h1>        {/* EmployeesTable component to display the table with the flattened data */}       <EmployeesTable datas={flated} />     </main>   ) }
/* File: K:\Synochro\DEV\Projets OC\P14\hrNet\src\Redux\databaseSlice\dataBaseSlice.js */
import { createSlice } from "@reduxjs/toolkit";  // Creation of a slice for managing employee data in the Redux store const dataBaseSlice = createSlice({   name: "EmployeeList", // Name of the slice   initialState: [], // Initial state of the slice, an empty array   reducers: {     // Reducer function for adding an employee     add_employee: (state, action) => {       // Adds a new employee object to the state array       state.push({         'infos': action.payload.infos,         'contact': action.payload.contact,         'onboarding': action.payload.onBoarding       });     },     // Reducer function for removing all employees     remove_employee: (state) => {       state = []; // Resets the state to an empty array     }   } });  // Exporting the action creators export const { add_employee, remove_employee } = dataBaseSlice.actions;  // Exporting the reducer export default dataBaseSlice.reducer;
/* File: K:\Synochro\DEV\Projets OC\P14\hrNet\src\Redux\EmployeesSlices\contactSlice.js */
import { createSlice } from "@reduxjs/toolkit";  // Defining a slice for contact information const contactSlice = createSlice({   name: "contact", // Name of the slice   initialState: {     // Initial state with all contact fields set to empty strings     street: "",     city: "",     state: "",     zip: "",   },   reducers: {     // Reducer for adding or updating contact information     add_contact: (state, action) => {       // Updates each field in the state with new values from the action payload       state.street = action.payload.street;       state.city = action.payload.city;       state.state = action.payload.state;       state.zip = action.payload.zip;     },      // Reducer for removing contact information     remove_contact: (state) => {       // Resets all fields in the state to empty strings       state.street = "";       state.city = "";       state.state = "";       state.zip = "";     },   } });  // Exporting the action creators for adding and removing contact information export const { add_contact, remove_contact } = contactSlice.actions;  // Exporting the reducer export default contactSlice.reducer;
/* File: K:\Synochro\DEV\Projets OC\P14\hrNet\src\Redux\EmployeesSlices\InfosSlice.js */
import { createSlice } from "@reduxjs/toolkit";  // Creating a slice for handling information like first name, last name, and birth date const infosSlice = createSlice({   name: "infos", // Name of the slice   initialState: {     // Initial state with each field set to an empty string     firstName: "",     lastName: "",     birthDate: "",   },   reducers: {     // Reducer for adding or updating information     add_infos: (state, action) => {       // Updates each field in the state with new values from the action payload       state.firstName = action.payload.firstName;       state.lastName = action.payload.lastName;       state.birthDate = action.payload.birthDate;     },      // Reducer for removing information     remove_infos: (state) => {       // Resets all fields in the state to empty strings       state.firstName = "";       state.lastName = "";       state.birthDate = "";     }   } });  // Exporting the action creators for adding and removing information export const { add_infos, remove_infos } = infosSlice.actions;  // Exporting the reducer export default infosSlice.reducer;
/* File: K:\Synochro\DEV\Projets OC\P14\hrNet\src\Redux\EmployeesSlices\onBoardingSlice.js */
import { createSlice } from "@reduxjs/toolkit";  // Define a slice for handling onboarding data const onBoardingSlice = createSlice({   name: "onBoarding", // Name of the slice   initialState: {     // The initial state contains two properties: startDate and department     startDate: "",     department: "",   },   reducers: {     // Reducer for adding or updating onboarding information     add_onboarding: (state, action) => {       // Updates the startDate and department based on the action payload       state.startDate = action.payload.startDate;       state.department = action.payload.department;     },     // Reducer for removing onboarding information     remove_onboarding: (state) => {       // Resets the startDate and department to empty strings       state.startDate = "";       state.department = "";     }   } });  // Export action creators for adding and removing onboarding information export const { add_onboarding, remove_onboarding } = onBoardingSlice.actions;  // Export the reducer export default onBoardingSlice.reducer;
/* File: K:\Synochro\DEV\Projets OC\P14\hrNet\src\Redux\store.js */
import { configureStore, combineReducers } from '@reduxjs/toolkit';
import infos from './EmployeesSlices/InfosSlice.js';
import onBoardingSlice from './EmployeesSlices/onBoardingSlice.js';
import contactSlice from './EmployeesSlices/contactSlice.js';
import database from './databaseSlice/dataBaseSlice.js';

const employee = combineReducers({
  infos: infos,
  contact: contactSlice,
  onboarding: onBoardingSlice
});

const rootReducer = combineReducers({
  employee: employee,
  database
});

const store = configureStore({
  reducer: rootReducer
});

export default store;

/* File: K:\Synochro\DEV\Projets OC\P14\hrNet\src\utils\utils.js */
export const departments = [
  {
    value: 'Sales',
    label: 'Sales'
  },
  {
    value: 'Marketing',
    label: 'Marketing'
  },
  {
    value: 'Engineering',
    label: 'Engineering'
  },
  {
    value: 'Human Ressources',
    label: 'Human Ressources'
  },
  {
    value: 'Legal',
    label: 'Legal'
  }
];

export const states = [
  {
    value: { name: "Alabama", abbreviation: "AL" },
    label: "Alabama",
  },
  {
    value: { name: "Alaska", abbreviation: "AK" },
    label: "Alaska",
  },
  {
    value: { name: "American Samoa", abbreviation: "AS" },
    label: "American Samoa",
  },
  // ... rest of the states
];

/* File: K:\Synochro\DEV\Projets OC\P14\hrNet\src\App.js */
import './App.css';
import CreateUserPage from './Pages/CreateUserPage/CreateUserPage.jsx';
import ShowUserPage from './Pages/ShowUsersPage/ShowUsersPage.jsx';
import { Routes, Route } from 'react-router-dom';
import Layout from './Pages/Components/Layout.jsx';
import ErrorPage from './Pages/ErrorPage/ErrorPage.jsx';
import { Navigate } from 'react-router-dom';

/**
 * Main Application Component
 * Defines the routing structure for the application.
 */
function App() {
  return (
    <Routes>
      {/* Route configuration starts here */}
      <Route path="/" element={<Layout />}>
        {/* Default index route, renders CreateUserPage */}
        <Route index element={<CreateUserPage />} />
        {/* Route for showing the employees, renders ShowUserPage */}
        <Route path='/showemployees' element={<ShowUserPage />} />
        {/* Route for displaying error page */}
        <Route path='error' element={<ErrorPage />} />
        {/* Catch-all route, redirects to the error page */}
        <Route path='*' element={<Navigate to='/error' />} />
      </Route>
    </Routes>
  )
}

export default App;

/* File: K:\Synochro\DEV\Projets OC\P14\hrNet\src\index.js */
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css'; // Global CSS
import App from './App'; // Main App component
import { BrowserRouter } from 'react-router-dom'; // React Router
import { Provider } from 'react-redux'; // Redux Provider
import store from './Redux/store.js'; // Redux store

// Creating a root element in the DOM
const root = ReactDOM.createRoot(document.getElementById('root'));

// Rendering the application
root.render(
  <React.StrictMode>
    {/* Provider makes Redux store available to any nested components */}
    <Provider store={store}>
      {/* BrowserRouter enables navigation and routing in the application */}
      <BrowserRouter>
        {/* Main App component is rendered here */}
        <App />
      </BrowserRouter>
    </Provider>
  </React.StrictMode>
)
